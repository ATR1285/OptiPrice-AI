{"cells":[{"cell_type":"code","source":["!pip install gradio kaggle\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UQgbBZbSbz7N","executionInfo":{"status":"ok","timestamp":1745643078175,"user_tz":-330,"elapsed":14192,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"ca786a86-77d7-4828-f877-1cc15bc13524"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gradio\n","  Downloading gradio-5.27.0-py3-none-any.whl.metadata (16 kB)\n","Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.7.4.2)\n","Collecting aiofiles<25.0,>=22.0 (from gradio)\n","  Downloading aiofiles-24.1.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.9.0)\n","Collecting fastapi<1.0,>=0.115.2 (from gradio)\n","  Downloading fastapi-0.115.12-py3-none-any.whl.metadata (27 kB)\n","Collecting ffmpy (from gradio)\n","  Downloading ffmpy-0.5.0-py3-none-any.whl.metadata (3.0 kB)\n","Collecting gradio-client==1.9.0 (from gradio)\n","  Downloading gradio_client-1.9.0-py3-none-any.whl.metadata (7.1 kB)\n","Collecting groovy~=0.1 (from gradio)\n","  Downloading groovy-0.1.2-py3-none-any.whl.metadata (6.1 kB)\n","Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.28.1)\n","Requirement already satisfied: huggingface-hub>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.30.2)\n","Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.1.6)\n","Requirement already satisfied: markupsafe<4.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.0.2)\n","Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.0.2)\n","Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.10.16)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from gradio) (24.2)\n","Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.2.2)\n","Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (11.1.0)\n","Requirement already satisfied: pydantic<2.12,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.11.3)\n","Collecting pydub (from gradio)\n","  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n","Collecting python-multipart>=0.0.18 (from gradio)\n","  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n","Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (6.0.2)\n","Collecting ruff>=0.9.3 (from gradio)\n","  Downloading ruff-0.11.7-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n","Collecting safehttpx<0.2.0,>=0.1.6 (from gradio)\n","  Downloading safehttpx-0.1.6-py3-none-any.whl.metadata (4.2 kB)\n","Collecting semantic-version~=2.0 (from gradio)\n","  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n","Collecting starlette<1.0,>=0.40.0 (from gradio)\n","  Downloading starlette-0.46.2-py3-none-any.whl.metadata (6.2 kB)\n","Collecting tomlkit<0.14.0,>=0.12.0 (from gradio)\n","  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)\n","Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.15.2)\n","Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.13.2)\n","Collecting uvicorn>=0.14.0 (from gradio)\n","  Downloading uvicorn-0.34.2-py3-none-any.whl.metadata (6.5 kB)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.9.0->gradio) (2025.3.2)\n","Requirement already satisfied: websockets<16.0,>=10.0 in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.9.0->gradio) (15.0.1)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n","Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2025.1.31)\n","Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.4.1)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.10)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from kaggle) (5.29.4)\n","Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.8.2)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n","Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.11/dist-packages (from kaggle) (75.2.0)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n","Requirement already satisfied: text-unidecode in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n","Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.3.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from kaggle) (0.5.1)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (1.0.8)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (3.18.0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (2.33.1)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.4.0)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.8)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n","Downloading gradio-5.27.0-py3-none-any.whl (54.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.0/54.0 MB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading gradio_client-1.9.0-py3-none-any.whl (322 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.6/322.6 kB\u001b[0m \u001b[31m31.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading aiofiles-24.1.0-py3-none-any.whl (15 kB)\n","Downloading fastapi-0.115.12-py3-none-any.whl (95 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m10.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading groovy-0.1.2-py3-none-any.whl (14 kB)\n","Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n","Downloading ruff-0.11.7-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.5/11.5 MB\u001b[0m \u001b[31m117.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading safehttpx-0.1.6-py3-none-any.whl (8.7 kB)\n","Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n","Downloading starlette-0.46.2-py3-none-any.whl (72 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading tomlkit-0.13.2-py3-none-any.whl (37 kB)\n","Downloading uvicorn-0.34.2-py3-none-any.whl (62 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ffmpy-0.5.0-py3-none-any.whl (6.0 kB)\n","Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n","Installing collected packages: pydub, uvicorn, tomlkit, semantic-version, ruff, python-multipart, groovy, ffmpy, aiofiles, starlette, safehttpx, gradio-client, fastapi, gradio\n","Successfully installed aiofiles-24.1.0 fastapi-0.115.12 ffmpy-0.5.0 gradio-5.27.0 gradio-client-1.9.0 groovy-0.1.2 pydub-0.25.1 python-multipart-0.0.20 ruff-0.11.7 safehttpx-0.1.6 semantic-version-2.10.0 starlette-0.46.2 tomlkit-0.13.2 uvicorn-0.34.2\n"]}]},{"cell_type":"markdown","source":["api\n"],"metadata":{"id":"3_2KCjsNczHx"}},{"cell_type":"code","source":["from google.colab import files\n","files.upload()  # Upload your kaggle.json here\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":91},"id":"YbEcVQ2tcp4e","executionInfo":{"status":"ok","timestamp":1745643294436,"user_tz":-330,"elapsed":7747,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"2cd00ee1-f8cc-47f9-fbb5-c666dd1bef20"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-32a039b6-444e-4ba3-8597-c29d34cdc313\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-32a039b6-444e-4ba3-8597-c29d34cdc313\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n"]},{"output_type":"execute_result","data":{"text/plain":["{'kaggle.json': b'{\"username\":\"richardat001\",\"key\":\"5d31ff2a3c5bcfa323dff819f2aaaf5b\"}'}"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","\n"],"metadata":{"id":"Tu6UJElZcwRW","executionInfo":{"status":"ok","timestamp":1745643313903,"user_tz":-330,"elapsed":424,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["!kaggle datasets download -d mkechinov/ecommerce-behavior-data-from-multi-category-store\n","!unzip ecommerce-behavior-data-from-multi-category-store.zip\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9_k7Qv7Mc5f9","executionInfo":{"status":"ok","timestamp":1745643665394,"user_tz":-330,"elapsed":314848,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"8369ab82-b2f2-4021-d8ed-4f2f04ab199a"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset URL: https://www.kaggle.com/datasets/mkechinov/ecommerce-behavior-data-from-multi-category-store\n","License(s): copyright-authors\n","Archive:  ecommerce-behavior-data-from-multi-category-store.zip\n","  inflating: 2019-Nov.csv            \n","  inflating: 2019-Oct.csv            \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the dataset\n","df = pd.read_csv(\"2019-Oct.csv\")\n","\n","# View basic info\n","print(df.head())\n","print(\"\\nColumns:\", df.columns.tolist())\n","print(\"\\nInfo:\")\n","print(df.info())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o9XlrYKufm09","executionInfo":{"status":"ok","timestamp":1745644187688,"user_tz":-330,"elapsed":124021,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"bb19d82b-a526-46e6-be29-3eff9d8686f5"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["                event_time event_type  product_id          category_id  \\\n","0  2019-10-01 00:00:00 UTC       view    44600062  2103807459595387724   \n","1  2019-10-01 00:00:00 UTC       view     3900821  2053013552326770905   \n","2  2019-10-01 00:00:01 UTC       view    17200506  2053013559792632471   \n","3  2019-10-01 00:00:01 UTC       view     1307067  2053013558920217191   \n","4  2019-10-01 00:00:04 UTC       view     1004237  2053013555631882655   \n","\n","                         category_code     brand    price    user_id  \\\n","0                                  NaN  shiseido    35.79  541312140   \n","1  appliances.environment.water_heater      aqua    33.20  554748717   \n","2           furniture.living_room.sofa       NaN   543.10  519107250   \n","3                   computers.notebook    lenovo   251.74  550050854   \n","4               electronics.smartphone     apple  1081.98  535871217   \n","\n","                           user_session  \n","0  72d76fde-8bb3-4e00-8c23-a032dfed738c  \n","1  9333dfbd-b87a-4708-9857-6336556b0fcc  \n","2  566511c2-e2e3-422b-b695-cf8e6e792ca8  \n","3  7c90fc70-0e80-4590-96f3-13c02c18c713  \n","4  c6bd7419-2748-4c56-95b4-8cec9ff8b80d  \n","\n","Columns: ['event_time', 'event_type', 'product_id', 'category_id', 'category_code', 'brand', 'price', 'user_id', 'user_session']\n","\n","Info:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 42448764 entries, 0 to 42448763\n","Data columns (total 9 columns):\n"," #   Column         Dtype  \n","---  ------         -----  \n"," 0   event_time     object \n"," 1   event_type     object \n"," 2   product_id     int64  \n"," 3   category_id    int64  \n"," 4   category_code  object \n"," 5   brand          object \n"," 6   price          float64\n"," 7   user_id        int64  \n"," 8   user_session   object \n","dtypes: float64(1), int64(3), object(5)\n","memory usage: 2.8+ GB\n","None\n"]}]},{"cell_type":"markdown","source":["fliter only prchase"],"metadata":{"id":"_Be2-jlDgVg8"}},{"cell_type":"code","source":["# Step 1: Filter only 'purchase' events\n","df_purchase = df[df['event_type'] == 'purchase']\n","\n","# Step 2: Create a price column (simulate price levels for this demo)\n","import numpy as np\n","np.random.seed(42)\n","df_purchase['price_level'] = np.random.randint(0, 5, size=len(df_purchase))  # Simulate price from 0 to 4\n","\n","# Step 3: Group by product and count purchases to simulate demand levels\n","demand = df_purchase.groupby('product_id')['event_time'].count().reset_index(name='demand_level')\n","demand['demand_level'] = pd.qcut(demand['demand_level'], 5, labels=False, duplicates='drop')\n","  # Convert to 0–4 scale\n","\n","# Merge demand_level back into purchase data\n","df_purchase = df_purchase.merge(demand, on='product_id', how='left')\n","\n","# Final columns needed\n","df_model = df_purchase[['product_id', 'price_level', 'demand_level']].dropna()\n","\n","df_model.head()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"bFTHiPbfgTa-","executionInfo":{"status":"ok","timestamp":1745644540420,"user_tz":-330,"elapsed":5034,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"2f676c01-bd23-42c9-ef0a-83140368c636"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-16-3053217d8bf4>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_purchase['price_level'] = np.random.randint(0, 5, size=len(df_purchase))  # Simulate price from 0 to 4\n"]},{"output_type":"execute_result","data":{"text/plain":["   product_id  price_level  demand_level\n","0     1004856            3             3\n","1     1002532            4             3\n","2     5100816            2             3\n","3    13800054            4             0\n","4     4804055            4             3"],"text/html":["\n","  <div id=\"df-d18349f9-66e8-40b0-9fa9-17751b4d6459\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>price_level</th>\n","      <th>demand_level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1004856</td>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1002532</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5100816</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13800054</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4804055</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d18349f9-66e8-40b0-9fa9-17751b4d6459')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d18349f9-66e8-40b0-9fa9-17751b4d6459 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d18349f9-66e8-40b0-9fa9-17751b4d6459');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0f39333e-cb14-4d42-a449-39249f92aef5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f39333e-cb14-4d42-a449-39249f92aef5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0f39333e-cb14-4d42-a449-39249f92aef5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_model"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# Ensure demand_level is numeric and no NaNs\n","df_purchase = df_purchase.dropna(subset=['demand_level', 'price_level'])\n","\n","states = 5   # demand_level: 0 to 4\n","actions = 5  # price_level: 0 to 4\n","\n","# Initialize Q-table with zeros\n","q_table = np.zeros((states, actions))\n","\n","# Set learning parameters\n","alpha = 0.1     # Learning rate\n","gamma = 0.9     # Discount factor\n","epsilon = 0.1   # Exploration rate\n"],"metadata":{"id":"WLsZYXGbhAYI","executionInfo":{"status":"ok","timestamp":1745644578712,"user_tz":-330,"elapsed":129,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["\n","**# Step 6: Implement Q-learning for price optimization**"],"metadata":{"id":"eHA435hEuhFH"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","# --- Step 0: Create or Load df_purchase ---\n","np.random.seed(42)  # For reproducibility\n","\n","# Create a dummy dataset with 1000 samples\n","df_purchase = pd.DataFrame({\n","    'product_id': np.arange(1000),\n","    'event_time': pd.date_range(start='2024-01-01', periods=1000, freq='H'),\n","    'demand_level': np.random.randint(0, 5, size=1000),  # 5 demand levels: 0-4\n","    'price_level': np.random.randint(0, 5, size=1000)    # 5 price levels: 0-4\n","})\n","\n","print(df_purchase.head())  # See if it's loaded properly ✅\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UCSl0qzcuZ1h","executionInfo":{"status":"ok","timestamp":1745652535118,"user_tz":-330,"elapsed":140,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"1955babc-8af0-438d-fbb0-9a6b5ad7de1f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["   product_id          event_time  demand_level  price_level\n","0           0 2024-01-01 00:00:00             3            3\n","1           1 2024-01-01 01:00:00             4            3\n","2           2 2024-01-01 02:00:00             2            3\n","3           3 2024-01-01 03:00:00             4            3\n","4           4 2024-01-01 04:00:00             4            4\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-99205be4e19f>:10: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.\n","  'event_time': pd.date_range(start='2024-01-01', periods=1000, freq='H'),\n"]}]},{"cell_type":"code","source":["# Apply the best price level decision\n","df_purchase['predicted_price_level'] = df_purchase['demand_level'].apply(\n","    lambda state: np.argmax(q_table[int(state)])\n",")\n","\n","# Display the updated dataframe\n","df_purchase[['product_id', 'demand_level', 'predicted_price_level']].head(10)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":362},"id":"lQt8Kc15tI9q","executionInfo":{"status":"ok","timestamp":1745647610022,"user_tz":-330,"elapsed":3296,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"1e665ae7-671a-4e0b-85ed-580e7c4de971"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   product_id  demand_level  predicted_price_level\n","0     1004856             3                      4\n","1     1002532             3                      4\n","2     5100816             3                      4\n","3    13800054             0                      1\n","4     4804055             3                      4\n","5     4804056             3                      4\n","6     1002524             3                      4\n","7     6200687             3                      4\n","8     4802036             3                      4\n","9     1004932             3                      4"],"text/html":["\n","  <div id=\"df-34c3c8be-f30b-4a93-b01f-15280d5dc179\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>demand_level</th>\n","      <th>predicted_price_level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1004856</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1002532</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5100816</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13800054</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4804055</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4804056</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1002524</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6200687</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4802036</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1004932</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34c3c8be-f30b-4a93-b01f-15280d5dc179')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-34c3c8be-f30b-4a93-b01f-15280d5dc179 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-34c3c8be-f30b-4a93-b01f-15280d5dc179');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-776490ac-17eb-4971-ace5-bf8d50a590d1\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-776490ac-17eb-4971-ace5-bf8d50a590d1')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-776490ac-17eb-4971-ace5-bf8d50a590d1 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_purchase[['product_id', 'demand_level', 'predicted_price_level']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3925691,\n        \"min\": 1002524,\n        \"max\": 13800054,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          4802036,\n          1002532,\n          4804056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"demand_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_price_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["real money"],"metadata":{"id":"YL8N5kS0uDEP"}},{"cell_type":"code","source":["# Let's assume real price levels (example: 0 => ₹100, 1 => ₹200, 2 => ₹300, etc.)\n","price_mapping = {\n","    0: 100,\n","    1: 200,\n","    2: 300,\n","    3: 400,\n","    4: 500\n","}\n","\n","# Create a new column for predicted real price\n","df_purchase['predicted_real_price'] = df_purchase['predicted_price_level'].map(price_mapping)\n","\n","# Display few examples\n","df_purchase[['product_id', 'demand_level', 'predicted_price_level', 'predicted_real_price']].head(10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":362},"id":"9J5dgAJsuBfO","executionInfo":{"status":"ok","timestamp":1745647838501,"user_tz":-330,"elapsed":76,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"34d2c9a2-1c79-49c6-9267-d1241d838488"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   product_id  demand_level  predicted_price_level  predicted_real_price\n","0     1004856             3                      4                   500\n","1     1002532             3                      4                   500\n","2     5100816             3                      4                   500\n","3    13800054             0                      1                   200\n","4     4804055             3                      4                   500\n","5     4804056             3                      4                   500\n","6     1002524             3                      4                   500\n","7     6200687             3                      4                   500\n","8     4802036             3                      4                   500\n","9     1004932             3                      4                   500"],"text/html":["\n","  <div id=\"df-a6c7f661-9b4e-440a-afda-ac56798aa5bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>demand_level</th>\n","      <th>predicted_price_level</th>\n","      <th>predicted_real_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1004856</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1002532</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5100816</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13800054</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>200</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4804055</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4804056</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1002524</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6200687</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4802036</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1004932</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6c7f661-9b4e-440a-afda-ac56798aa5bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a6c7f661-9b4e-440a-afda-ac56798aa5bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a6c7f661-9b4e-440a-afda-ac56798aa5bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-08bf1072-0170-48df-8d91-de4cf7264b11\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08bf1072-0170-48df-8d91-de4cf7264b11')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-08bf1072-0170-48df-8d91-de4cf7264b11 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_purchase[['product_id', 'demand_level', 'predicted_price_level', 'predicted_real_price']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3925691,\n        \"min\": 1002524,\n        \"max\": 13800054,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          4802036,\n          1002532,\n          4804056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"demand_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_price_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_real_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 94,\n        \"min\": 200,\n        \"max\": 500,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          200,\n          500\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Scatter plot\n","plt.figure(figsize=(10, 6))\n","plt.scatter(df_purchase['demand_level'], df_purchase['predicted_real_price'], alpha=0.5, c='green')\n","\n","plt.title('Demand Level vs Predicted Real Price')\n","plt.xlabel('Demand Level (0 = Low, 4 = High)')\n","plt.ylabel('Predicted Price (₹)')\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"8bddIwPnt-cS","executionInfo":{"status":"ok","timestamp":1745647828739,"user_tz":-330,"elapsed":2750,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"6676982a-cdbb-4d3d-f194-cf47e56e5d18"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# --- Step 1: Load or Create Dataset ---\n","np.random.seed(42)  # For reproducibility\n","\n","df_purchase = pd.DataFrame({\n","    'product_id': np.arange(1000),\n","    'demand_level': np.random.randint(0, 5, size=1000),  # 5 demand levels (0-4)\n","    'price_level': np.random.randint(0, 5, size=1000)    # 5 price levels (0-4)\n","})\n","\n","# --- Step 2: Initialize Q-learning ---\n","num_states = df_purchase['demand_level'].nunique()\n","num_actions = df_purchase['price_level'].nunique()\n","Q_table = np.zeros((num_states, num_actions))\n","\n","# Q-learning parameters\n","alpha = 0.1    # Learning rate\n","gamma = 0.9    # Discount factor\n","epsilon = 0.2  # Exploration rate\n","num_episodes = 100\n","\n","# --- Step 3: Train Q-learning ---\n","for episode in range(num_episodes):\n","    for i in range(len(df_purchase)):\n","        state = int(df_purchase.iloc[i]['demand_level'])\n","\n","        # Epsilon-greedy action selection\n","        if np.random.rand() < epsilon:\n","            action = np.random.randint(num_actions)\n","        else:\n","            action = np.argmax(Q_table[state])\n","\n","        # Reward: Higher demand + better pricing match gives better reward\n","        reward = 5 - abs(state - action)\n","\n","        next_state = state  # No transition logic in this simple case\n","\n","        # Q-learning update\n","        Q_table[state, action] += alpha * (\n","            reward + gamma * np.max(Q_table[next_state]) - Q_table[state, action]\n","        )\n","\n","print(\"✅ Training complete!\")\n","print(\"Learned Q-Table:\\n\", Q_table)\n","\n","# --- Step 4: Predict Optimal Prices ---\n","optimal_price_levels = Q_table.argmax(axis=1)\n","df_purchase['predicted_price_level'] = df_purchase['demand_level'].map(lambda x: optimal_price_levels[x])\n","\n","# --- Step 5: Visualize Q-table ---\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(Q_table, annot=True, cmap=\"YlGnBu\", fmt=\".2f\")\n","plt.xlabel('Price Level (Action)')\n","plt.ylabel('Demand Level (State)')\n","plt.title('Learned Q-Values for Pricing Strategy')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":691},"id":"_YtgA0-h-8YO","executionInfo":{"status":"ok","timestamp":1745652675587,"user_tz":-330,"elapsed":7080,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"eea0c897-a6bd-4b6f-c68e-67207be4ced1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Training complete!\n","Learned Q-Table:\n"," [[50. 49. 48. 47. 46.]\n"," [49. 50. 49. 48. 47.]\n"," [48. 49. 50. 49. 48.]\n"," [47. 48. 49. 50. 49.]\n"," [46. 47. 48. 49. 50.]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Code to Plot: Actual vs Predicted Price Levels"],"metadata":{"id":"JJr7wrlnA0l7"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# --- Plotting Actual vs Predicted ---\n","plt.figure(figsize=(10, 6))\n","\n","plt.scatter(df_purchase['demand_level'], df_purchase['price_level'], color='blue', label='Actual Price Level', alpha=0.5)\n","plt.scatter(df_purchase['demand_level'], df_purchase['predicted_price_level'], color='red', label='Predicted Price Level', alpha=0.5)\n","\n","plt.title('Actual vs Predicted Price Levels by Demand Level')\n","plt.xlabel('Demand Level')\n","plt.ylabel('Price Level')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"PaaqNV7wA3Ru","executionInfo":{"status":"ok","timestamp":1745652777282,"user_tz":-330,"elapsed":389,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"5a8cb631-4894-496a-ee30-ec5f1799c35a"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import accuracy_score\n","\n","# Generate synthetic data\n","np.random.seed(42)\n","num_samples = 2000  # Reduced for performance\n","demand_levels = np.random.randint(0, 5, size=num_samples)\n","price_levels = [min(4, max(0, d + np.random.choice([-1, 0, 1], p=[0.05, 0.9, 0.05]))) for d in demand_levels]\n","\n","df_purchase = pd.DataFrame({\n","    'demand_level': demand_levels,\n","    'price_level': price_levels\n","})\n","\n","# Q-learning setup\n","num_states = 5\n","num_actions = 5\n","Q_table = np.zeros((num_states, num_actions))\n","alpha = 0.1\n","gamma = 0.9\n","epsilon = 0.1\n","episodes = 500\n","\n","# Q-learning training (vectorized approach)\n","for _ in range(episodes):\n","    sampled = df_purchase.sample(frac=1).reset_index(drop=True)\n","    states = sampled['demand_level'].values\n","    actual_prices = sampled['price_level'].values\n","    for i in range(len(sampled)):\n","        s = states[i]\n","        a = np.random.randint(num_actions) if np.random.rand() < epsilon else np.argmax(Q_table[s])\n","        reward = 1 if a == actual_prices[i] else -1\n","        Q_table[s, a] += alpha * (reward + gamma * np.max(Q_table[s]) - Q_table[s, a])\n","\n","# Predict optimal price\n","optimal_actions = np.argmax(Q_table, axis=1)\n","df_purchase['predicted_price'] = df_purchase['demand_level'].map(lambda d: optimal_actions[d])\n","accuracy = accuracy_score(df_purchase['price_level'], df_purchase['predicted_price'])\n","\n","# Heatmap\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(Q_table, annot=True, cmap=\"YlGnBu\", fmt=\".2f\")\n","plt.title(\"Optimized Q-Table Heatmap\")\n","plt.xlabel(\"Price Level (Action)\")\n","plt.ylabel(\"Demand Level (State)\")\n","plt.tight_layout()\n","plt.show()\n","\n","print(\"Accuracy:\", round(accuracy * 100, 2), \"%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":625},"id":"VQ2tgOycCkIx","executionInfo":{"status":"ok","timestamp":1745653297310,"user_tz":-330,"elapsed":16838,"user":{"displayName":"Richard A.T","userId":"08652914946033655251"}},"outputId":"dd28fb2f-e170-4445-ce4c-455e5289e4d1"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"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9qf/URgZGak9ACciIiIiyut4ZwERERERiUb4RuZsaxvv6iIiIiIiEhkz4UREREQkHmbCATATTkREREQkOmbCiYiIiEg8/MVMAMyEExERERGJjplwIiIiIhIPU8AA+DQQEREREYmOmXAiIiIiEg/nhANgJpyIiIiISHTMhBMRERGReLhOOABmwomIiIiIRMdMOBERERGJh5lwAMyEExERERGJjplwIiIiIhKNwNVRADATTkREREQkOmbCiYiIiEg8TAED4NNARERERCQ6ZsKJiIiISDycEw6AmXAiIiIiItExE05ERERE4uE64QDUHITfu3cP27Ztw7lz5xAaGork5GRYW1ujfPnyaNKkCb777jtIpVJtxUpERERElC+oNB3l2rVraNiwIcqXL4/z58+jatWqGDZsGKZPn47u3btDEAT8+uuvcHBwwOzZs5GWlqbtuImIiIjoW6Qj0f72DVApE/7dd99h9OjR2LFjB8zMzHKsFxAQgEWLFmHevHmYMGGCpmIkIiIiIspXVMqEP3jwAIMHD/7kABwAqlevjm3btmH06NGaiI2IiIiI8huJCJsaMjMzMXHiRLi6usLQ0BDu7u6YPn06BEH4ZLvTp0+jQoUKkEql8PDwwLp169Q6r0qZcH19/WzLU1NTYWBgoHJ9IiIiIqK8ZPbs2Vi2bBnWr18Pb29vBAUFoU+fPjA1NcXQoUOzbfP06VO0aNECAwcOxObNm3HixAn069cP9vb2aNKkiUrnVXt1FJlMht9++w3Lly9HVFQUHjx4ADc3N0ycOBEuLi744Ycf1D0kERERERUQQh6bs33x4kW0adMGLVq0AAC4uLhg69atuHLlSo5tli9fDldXV8ybNw8A4OnpifPnz2PBggUqD8LVXid8xowZWLduHebMmYNChQopykuXLo3Vq1erezgiIiIiIo1KS0tDUlKS0pbTwiE1atTAiRMn8ODBAwDAzZs3cf78eTRr1izH4wcEBKBhw4ZKZU2aNEFAQIDKMao9CN+wYQNWrlyJbt26QVdXV1FetmxZhISEqHs4IiIiIipIJBKtb35+fjA1NVXa/Pz8sg1n3Lhx6Ny5M0qVKgV9fX2UL18ew4YNQ7du3XK8hJcvX8LW1lapzNbWFklJSUhJSVHpaVB7OkpERAQ8PDyylMtkMrx7907dwxERERERadT48eMxYsQIpbKcfstm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iUSC0W29UdTKCJkyAaExbzBn121sOfdhtanudd0BANtG+Sqdb/S6IOwM4Io32uLt44y5C/vjz0X7sHr5YTg4WmLE2A5o1rKKoo78PffD63P3PxeQmSHDnBl/Y86MvxXlLdpUxZTfeooaPxVcEkEQcu3jQtmyZTF79mw0bSpfs/r27dsoVaoU9PTknw3OnTuHXr164ckT9ZbUe/PutKZDJSINik19/flK9M2oP4pL8OUnN/7gfUP5jYl+w9wOQcne0MNaP0cb52ZaP8fXytVM+KBBg5CZ+eFXxEqXVp6Tdfjw4c+ujkJERERE9K3J1UH4wIEDP7l/5syZIkVCRERERGLg6ihyvFuEiIiIiEhkuX5jJhEREREVHMyEyzETTkREREQkMmbCiYiIiEg0usyEA2AmnIiIiIhIdMyEExEREZFodL6RX7TUNmbCiYiIiIhExkw4EREREYmGGWA5Pg9ERERERCJjJpyIiIiIRMN1wuWYCSciIiIiEhkz4UREREQkGq4TLsdMOBERERGRyJgJJyIiIiLRcJ1wOWbCiYiIiIhExkw4EREREYmGq6PIMRNORERERCQyZsKJiIiISDTMhMsxE05EREREJDJmwomIiIhINMwAy/F5ICIiIiISGTPhRERERCQaCeeEA2AmnIiIiIhIdMyEExEREZFomAiXYyaciIiIiEhkzIQTERERkWg4J1yOmXAiIiIiIpExE05EREREomEGWI6DcCIiIiISjUQi5HYIeQI/jBARERERiYyZcCIiIiISDe/LlGMmnIiIiIhIZMyEExEREZFouEShHDPhREREREQiYyaciIiIiETDRLgcM+FERERERCJjJpyIiIiIRKPDVDgAZsKJiIiIiETHTDgRERERiYaJcDlmwomIiIiIRMZMOBERERGJhuuEyzETTkREREQkMmbCiYiIiEg0TITLMRNORERERCSyfJkJnxAk5HYIpGGGerLcDoE0KFNmlNshkAZ9/2Ph3A6BNMjWfXVuh0AalhLWMLdDUMJMuBwz4UREREREIsuXmXAiIiIiypv4i5lyzIQTEREREYmMmXAiIiIiEg0T4XLMhBMRERERiYyZcCIiIiISjUTCVewAZsKJiIiIiETHQTgRERERiUYiwqauiIgIdO/eHZaWljA0NISPjw+CgoJyrH/69GlIJJIs28uXL1U+J6ejEBEREVGB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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Accuracy: 91.8 %\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMvO5q4p9zkFfoKnKmGb82p"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}